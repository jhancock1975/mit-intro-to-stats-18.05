2*(4/8)*(3/7) + 3*(4/8)*(4/7) + 4*(4/8)*(3/6) + 5*(4/8)*(4/7)*(3/6)
2*(4/8)*(3/7) + 3*(4/8)*(4/7) + 4*(4/8)*(4/7)*(3/6) + 5*(4/8)*(4/7)*(3/6) + 5*(4/8)*(3/7)*(4/6) + 6*(4/8)*(3/7)*(2/6)
S= c(0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1)
rle(c)
S= vector(0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1)
S= c(0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1)
S
rle(S)
runs=rle(S)
runs[1]
max(runs[0])
max(runs[1])
runs[1]
runs[2]
max(c(runs[1]))
maximum(runs[1])
apply(max, runs[1])
apply(runs[1], max)
help apply
help(apply)
help(apply)
apply(runs[1], 1, max)
apply(runs[1], 2, max)
runs[1]
vector(runs[1])
trial <- function(){
nflips=50;
trial  = rbinom(nflips, 1, 0.5)
return max(rle(trial)$lengths)
trial <- function(){
trial  = rbinom(nflips, 1, 0.5)
return (max(rle(trial)$lengths))
}
trial()
trial <- function(){
nflips=50;
trial  = rbinom(nflips, 1, 0.5)
return (max(rle(trial)$lengths))
}
trial()
experiment <- function(){
sum = 0;
sum = sum + trial();
}
experiment <- function(){
sum = 0;
for (i in 1 : 10000){
sum = sum + trial();
}
return(sum/10000);
}
experiment()
x
x=c()
x.append(1)
x[50]=1
x[50]
x[1]
X[1]==null
x[1]==null
x[1]==NA
x[1]=x[1]+1
x[1]
is.na(x[1]))
is.na(x[1])
if (TRUE) { 1 } else {0}
if (FALSE) { 1 } else {0}
print("hello")
print("hello %d", x[50])
print("hello ". x[50])
print("hello " , x[50])
print(x[50])
trial <- function(runArr){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (is.na(runArr[maxRun])){
    runArr[maxRun] <- 1;
    } else {
    runArr[maxRun] <- runArr[maxRun] + 1;
    }
  return (maxRun)
}
experiment <- function(){
  sum = 0;
  runArr = c();
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(runArr);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(runArr[8] / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(runArr){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (is.na(as.integer(runArr[maxRun]))){
    runArr[maxRun] <- 1;
    } else {
    runArr[maxRun] <- runArr[maxRun] + 1;
    }
  return (maxRun)
}
experiment <- function(){
  sum = 0;
  runArr = c();
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(runArr);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(runArr[8] / numTrials);
  return(sum/numTrials);
}
experiment()
if (y[500]){1} else{0}
if (is.na(x[1]) {1}{0}
if (is.na(x[1]) {1} else {0}
if (TRUE) {1} else {0}
trial <- function(runArr){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  type(maxRun);
  if ( is.na(runArr[maxRun]) ){
    runArr[maxRun] <- 1;
    } else {
    runArr[maxRun] <- runArr[maxRun] + 1;
    }
  return (maxRun)
}
experiment <- function(){
  sum = 0;
  runArr = c();
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(runArr);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(runArr[8] / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(runArr){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  typeof(maxRun);
  if ( is.na(runArr[maxRun]) ){
    runArr[maxRun] <- 1;
    } else {
    runArr[maxRun] <- runArr[maxRun] + 1;
    }
  return (maxRun)
}
experiment <- function(){
  sum = 0;
  runArr = c();
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(runArr);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(runArr[8] / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(numEights){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (maxRun == 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
experiment <- function(){
  sum = 0;
  numEights = 0;
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(numEights);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(numEights){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (maxRun == 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial(numEights);
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (maxRun == 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  if (maxRun == 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights );
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (maxRun == 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (maxRun = 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (as.integer(maxRun) = 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (all.equal(maxRun, 8)){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (isTRUE(all.equal(maxRun, 8))){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
trial <- function(){
  nflips=50;
  trial  = rbinom(nflips, 1, 0.5);
  maxRun = max(rle(trial)$lengths);
  print (maxRun);
  if (maxRun === 8){
    numEights = numEights + 1; 
    }
  return (maxRun)
}
numEights = 0;
experiment <- function(){
  sum = 0;
  
  numTrials = 10000;
  for (i in 1 : numTrials){
  sum = sum + trial();
  }
  print("I estimate the probability of a run of length 8 to be ");
  print(numEights / numTrials);
  return(sum/numTrials);
}
experiment()
x=c(1,2,3)
max(x)
if (max(x) == 8) {1}{0}
if (max(x) == 8) {1} else {0}
if (max(x) == c(8)) {1} else {0}
if (max(x) == 3) {1}{0}
if (max(x) == 3) {1} else {0}
